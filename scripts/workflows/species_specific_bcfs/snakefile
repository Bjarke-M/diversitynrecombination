ref_list = ['Daubentonia_madagascariensis','Saguinus_midas','Chlorocebus_aethiops','Rhinopithecus_roxellana',
                'Mandrillus_sphinx','Macaca_mulatta','Loris_tardigradus','Callithrix_jacchus',
                'Pithecia_pithecia','Lemur_catta-Thomas','Gorilla_gorilla_gorilla','Aotus_nancymaae','Sapajus_apella',
                'Pongo_abelii','Cercocebus_atys','Galago_moholi','Nomascus_leucogenys','Colobus_guereza',
                'Cebus_albifrons','Cercopithecus_mitis','Pongo_pygmaeus','Pan_troglodytes','Erythrocebus_patas',
                'Microcebus_murinus','Atele_fusciceps','Otolemur_garnettii','Nycticebus_pygmaeus']

#Missing g.vcf.gz species: Theropithecus_gelada
#Missing chainfiles: Carlito_syrichta Propithecus_coquereli'
input_file = '/home/bjarkemp/primatediversity/people/bjarkemp/diversitynrecombination/data/PDGP_metadata.txt'
dictionary_of_inds = {}
with open(input_file, 'r') as file:
    header = next(file)  # Read and skip the header line
    for line in file:
        fields = line.strip().split(',')
        pdgp_id, genus, species, froh, sex, ref_assembly = fields
        if not ref_assembly:  # Check if ref_assembly is empty
            ref_assembly = 'unknown'
        # Add the pdgp_id to the appropriate category in the dictionary
        if ref_assembly not in dictionary_of_inds:
            dictionary_of_inds[ref_assembly] = {species: [pdgp_id]}
        elif species not in dictionary_of_inds[ref_assembly]:
            dictionary_of_inds[ref_assembly][species] = [pdgp_id]
        else:
            dictionary_of_inds[ref_assembly][species].append(pdgp_id)


def get_output_paths(dictionary_of_inds, ref_list):
    out_paths = []
    for ref_assembly in dictionary_of_inds:
        if ref_assembly != 'unknown' and ref_assembly in ref_list:
            for species in dictionary_of_inds[ref_assembly]:
                #print(ref_assembly,species)
                out_paths.extend([
                        f"/home/bjarkemp/primatediversity/people/bjarkemp/diversitynrecombination/data/species_specific_bcfs/{ref_assembly}/{species}_only.bcf.gz"
                        for species in dictionary_of_inds[ref_assembly]
                    ])
    return out_paths


def get_pd_ids_from_species(dictionary_of_inds, ref_assembly, species):
    return ','.join(dictionary_of_inds[ref_assembly][species])

rule all:
    input:
        expand(get_output_paths(dictionary_of_inds, ref_list), ref_assembly=ref_list)

rule species_specific_bcfs:
    input:
        bcfs = '/home/bjarkemp/primatediversity/people/bjarkemp/diversitynrecombination/data/liftover/{ref_assembly}/bcfs/{ref_assembly}_lifted.bcf.gz'
    output:
        species_specific = "/home/bjarkemp/primatediversity/people/bjarkemp/diversitynrecombination/data/species_specific_bcfs/{ref_assembly}/{species}_only.bcf.gz"
    params:
        ref_assembly = lambda wildcards: wildcards.ref_assembly,
        species = lambda wildcards: wildcards.species,
        pd_ids = get_pd_ids_from_species(dictionary_of_inds, ref_assembly, species)
    conda:
        'envs/bcftools.yaml'
    shell:
        """
        bcftools view -O b -s {params.pd_ids} {input.bcfs} > {output.species_specific}
        """
