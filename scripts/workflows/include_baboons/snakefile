import os 
# FILEPATH: /home/bjarkemp/primatediversity/people/bjarkemp/diversitynrecombination/scripts/workflows/include_baboons/snakefile
#
# This Snakefile is used to include baboons in the diversity and recombination analysis workflow.
# It is located at the specified file path.
#
#### START BY MAKING SURE YOU GET ALL THE PD_IDs FROM THE PDGP METADATA FILE ####
input_file = '/home/bjarkemp/primatediversity/people/bjarkemp/diversitynrecombination/data/PDGP_metadata.txt'
dictionary_of_inds = {}
with open(input_file, 'r') as file:
    header = next(file)  # Read and skip the header line
    for line in file:
        fields = line.strip().split(',')
        pdgp_id, genus, species, froh, sex, ref_assembly = fields
        if not ref_assembly:  # Check if ref_assembly is empty
            ref_assembly = 'unknown'
        # Add the pdgp_id to the appropriate category in the dictionary
        if ref_assembly not in dictionary_of_inds:
            dictionary_of_inds[ref_assembly] = [pdgp_id]
        else:
            dictionary_of_inds[ref_assembly].append(pdgp_id)

#### MAKE A LIST OF SPECIES FOR EACH REFERENCE ASSEMBLY ####
def generatedictionary(input):
    dictionary_of_species_n_pdid = {}
    with open(input_file, 'r') as file:
        header = next(file)  # Read and skip the header line
        for line in file:
            fields = line.strip().split(',')
            pdgp_id, genus, species, froh, sex, ref_assembly = fields
            if not ref_assembly:  # Check if ref_assembly is empty
                ref_assembly = 'unknown'
            # Add the pdgp_id to the appropriate category in the dictionary
            if ref_assembly not in dictionary_of_species_n_pdid:
                dictionary_of_species_n_pdid[ref_assembly] = {species: [pdgp_id]}
            elif species not in dictionary_of_species_n_pdid[ref_assembly]:
                dictionary_of_species_n_pdid[ref_assembly][species] = [pdgp_id]
            else:
                dictionary_of_species_n_pdid[ref_assembly][species].append(pdgp_id)
    return dictionary_of_species_n_pdid 


# Define a Python function to generate the expand statement
# This function takes a list of species and generates the appropriate input paths
def generate_input_paths(species_list, lifted_bed:int):
    input_paths = []
    for species in species_list:
        if lifted_bed==0:
            input_paths.extend([
                f"/home/bjarkemp/primatediversity/people/bjarkemp/diversitynrecombination/data/Baboons/{pdgp_id}/{pdgp_id}_concat.vcf.gz.csi"
                for pdgp_id in dictionary_of_inds[species]
            ])
    return input_paths

dictionary_of_ref = generatedictionary(input_file)
species_per_ref_assembly = dictionary_of_ref['Papio_anubis']
species_list = ['Papio_anubis']
pd_id_list = dictionary_of_inds['Papio_anubis']
list_of_windows = [10000, 50000, 100000, 500000, 1000000]
# Define a rule to generate the input paths
rule all:
    input:
        expand(generate_input_paths(species_list, lifted_bed=0), species=species_list),
        expand("/home/bjarkemp/primatediversity/people/bjarkemp/diversitynrecombination/data/liftover/{species}/vcfs/{species}_lifted.vcf", species=species_list),
        expand("/home/bjarkemp/primatediversity/people/bjarkemp/diversitynrecombination/data/liftover/{species}/vcfs/{species}_lifted.vcf.unmap", species=species_list),
        expand('/home/bjarkemp/primatediversity/people/bjarkemp/diversitynrecombination/data/Baboons/{species}/{species}ConcatGtVar.g.vcf.gz', species=species_list),
        # expand("/home/bjarkemp/primatediversity/people/bjarkemp/diversitynrecombination/data/liftover/{species}/bcfs/{species}_lifted.bcf.gz", species=species_list),
        # expand("/home/bjarkemp/primatediversity/people/bjarkemp/diversitynrecombination/data/liftover/{species}/bcfs/{species}_lifted_unmap.bcf.gz", species=species_list),
        # expand("/home/bjarkemp/primatediversity/people/bjarkemp/diversitynrecombination/data/liftover/{species}/bcfs/{species}_lifted.bcf.gz.csi", species=species_list),
        # expand("/home/bjarkemp/primatediversity/people/bjarkemp/diversitynrecombination/data/liftover/{species}/bcfs/{species}_lifted_unmap.bcf.gz.csi", species=species_list),
        # expand("/home/bjarkemp/primatediversity/people/bjarkemp/diversitynrecombination/data/mask/{species}/{pd_id}/{pd_id}.bed", species=species_list, pd_id=pd_id_list),
        # expand("/home/bjarkemp/primatediversity/people/bjarkemp/diversitynrecombination/data/mask/{species}/{pd_id}/{pd_id}_modcov.txt", species=species_list, pd_id=pd_id_list),
        # expand("/home/bjarkemp/primatediversity/people/bjarkemp/diversitynrecombination/data/mask/{species}/{pd_id}/{pd_id}_bed_lifted.bed", species=species_list, pd_id=pd_id_list),
        # expand("/home/bjarkemp/primatediversity/people/bjarkemp/diversitynrecombination/data/mask/{species}/{pd_id}/{pd_id}_bed_lifted.bed.unmap", species=species_list, pd_id=pd_id_list),
        # expand("/home/bjarkemp/primatediversity/people/bjarkemp/diversitynrecombination/data/mask/{species}/{pd_id}/{pd_id}_lifted_sorted.bed", species=species_list, pd_id=pd_id_list),
        # expand("/home/bjarkemp/primatediversity/people/bjarkemp/diversitynrecombination/data/species_specific_bcfs/{ref_assembly}/{species}/original/{species}_only.bcf.gz",ref_assembly=species_list, species=species_per_ref_assembly),
        # expand("/home/bjarkemp/primatediversity/people/bjarkemp/diversitynrecombination/data/species_specific_bcfs/{ref_assembly}/{species}/{species}_isolation.txt",ref_assembly=species_list, species=species_per_ref_assembly),
        # expand("/home/bjarkemp/primatediversity/people/bjarkemp/diversitynrecombination/data/species_specific_bcfs/{ref_assembly}/{species}/original/{species}_only.bcf.gz.csi",ref_assembly=species_list, species=species_per_ref_assembly),
        # expand("/home/bjarkemp/primatediversity/people/bjarkemp/diversitynrecombination/data/species_specific_bcfs/{ref_assembly}/{species}/nonpar/{species}_nonpar.bcf.gz", ref_assembly=species_list, species=species_per_ref_assembly),
        # expand("/home/bjarkemp/primatediversity/people/bjarkemp/diversitynrecombination/data/species_specific_bcfs/{ref_assembly}/{species}/par/{species}_par.bcf.gz", ref_assembly=species_list, species=species_per_ref_assembly),
        # expand("/home/bjarkemp/primatediversity/people/bjarkemp/diversitynrecombination/data/species_specific_bcfs/{ref_assembly}/{species}/nonpar/males_no_x/male_{species}_isolation.txt", ref_assembly=species_list, species=species_per_ref_assembly),
        # expand("/home/bjarkemp/primatediversity/people/bjarkemp/diversitynrecombination/data/species_specific_bcfs/{ref_assembly}/{species}/nonpar/females/{species}.bcf.gz",ref_assembly=species_list, species=species_per_ref_assembly),
        # expand("/home/bjarkemp/primatediversity/people/bjarkemp/diversitynrecombination/data/species_specific_bcfs/{ref_assembly}/{species}/nonpar/males_no_x/{species}.bcf.gz",ref_assembly=species_list, species=species_per_ref_assembly),
        # expand("/home/bjarkemp/primatediversity/people/bjarkemp/diversitynrecombination/data/species_specific_bcfs/{ref_assembly}/{species}/nonpar/merged_non_male_X/{species}.bcf.gz",ref_assembly=species_list, species=species_per_ref_assembly),
        # expand("/home/bjarkemp/primatediversity/people/bjarkemp/diversitynrecombination/results/windowed_pi/{ref_assembly}/{species}/nonpar/{species}_{window_size}.windowed.pi",ref_assembly=species_list, species=species_per_ref_assembly, window_size=list_of_windows),
        # expand("/home/bjarkemp/primatediversity/people/bjarkemp/diversitynrecombination/results/windowed_pi/{ref_assembly}/{species}/par/{species}_{window_size}_par.windowed.pi",ref_assembly=species_list, species=species_per_ref_assembly, window_size=list_of_windows),
        # expand("/home/bjarkemp/primatediversity/people/bjarkemp/diversitynrecombination/data/window_bed/{ref_assembly}/{species}/nonpar/{species}_{window_size}.bed",ref_assembly=species_list, species=species_per_ref_assembly, window_size=list_of_windows),
        # expand("/home/bjarkemp/primatediversity/people/bjarkemp/diversitynrecombination/data/window_bed/{ref_assembly}/{species}/par/{species}_{window_size}_par.bed",ref_assembly=species_list, species=species_per_ref_assembly, window_size=list_of_windows),



######################################### CONCATINATE THE VCF FILES #########################################

#Define a rule to concatenate the individual VCF files
rule concat_individuals_csi:
    resources:
        mem_mb= 8000,
        runtime= 120
    input:
        file_list = "/home/bjarkemp/primatediversity/people/bjarkemp/diversitynrecombination/data/Baboons/{pd_id}/{pd_id}_concat.vcf.gz"
    output:
        concat_output_csi = "/home/bjarkemp/primatediversity/people/bjarkemp/diversitynrecombination/data/Baboons/{pd_id}/{pd_id}_concat.vcf.gz.csi"
    conda:
        'envs/bcftools.yaml'
    shell:
        """
        bcftools index -f {input.file_list} -o {output.concat_output_csi}
        """

# Define a rule to concatenate the individual VCF files
rule concat_individuals:
    resources:
        mem_mb= 8000,
        runtime= 120
    input:
        file_list = '/home/bjarkemp/primatediversity/people/bjarkemp/diversitynrecombination/data/Baboons/{pd_id}/{pd_id}_files.txt'
    output:
        concat_output = "/home/bjarkemp/primatediversity/people/bjarkemp/diversitynrecombination/data/Baboons/{pd_id}/{pd_id}_concat.vcf.gz"
    conda:
        'envs/bcftools.yaml'
    shell:
        """
        bcftools concat -Oz -f {input.file_list} -o {output.concat_output}
        bcftools index -f {output.concat_output}
        """
# Define a rule to concatenate the reference assembly VCF files
rule merge_ref_assembly:
    resources:
        mem_mb= 64000,
        runtime= 10080,
    threads: 2
    input:
        files = expand("/home/bjarkemp/primatediversity/people/bjarkemp/diversitynrecombination/data/Baboons/{pd_id}/{pd_id}_concat.vcf.gz", pd_id=pd_id_list),
        file_list = '/home/bjarkemp/primatediversity/people/bjarkemp/diversitynrecombination/data/Baboons/all_inds_papio_files.txt'
    output:
        concat_output = '/home/bjarkemp/primatediversity/people/bjarkemp/diversitynrecombination/data/Baboons/{species}/{species}ConcatGtVar.g.vcf.gz'
    conda:
        'envs/bcftools.yaml'
    shell:
        """
        bcftools merge -O z -l {input.file_list} -o {output.concat_output}
        bcftools index -f {output.concat_output}
        """

# ######################################### LIFTOVER THE VCF FILES #################################################
# # Define a rule to liftover the concatenated VCF files
rule liftover_generate_vcf:
    resources:
        mem_mb= 16000,
        runtime= 900
    input:
        chain_file="/home/bjarkemp/primatediversity/data/chain_files_15_03_2022/{species}_To_hg38.liftOver.gz",
        input_vcf='/home/bjarkemp/primatediversity/people/bjarkemp/diversitynrecombination/data/Baboons/{species}/{species}ConcatGtVar.g.vcf.gz',
        reference_fasta="/home/bjarkemp/primatediversity/data/chain_files_15_03_2022/hg38/hg38.fasta"
    output:
        vcf="/home/bjarkemp/primatediversity/people/bjarkemp/diversitynrecombination/data/liftover/{species}/vcfs/{species}_lifted.vcf",
        unmapvcf="/home/bjarkemp/primatediversity/people/bjarkemp/diversitynrecombination/data/liftover/{species}/vcfs/{species}_lifted.vcf.unmap",
    shell:
        """
        # Run CrossMap.py to perform liftover and generate VCF files
        CrossMap.py vcf --chromid l --no-comp-alleles {input.chain_file} {input.input_vcf} {input.reference_fasta} {output.vcf}
        """


rule gzip_vcfs_sort:
    resources:
        mem_mb= 4000,
        runtime= 1500
    input:
        vcf="/home/bjarkemp/primatediversity/people/bjarkemp/diversitynrecombination/data/liftover/{species}/vcfs/{species}_lifted.vcf",
        unmapvcf="/home/bjarkemp/primatediversity/people/bjarkemp/diversitynrecombination/data/liftover/{species}/vcfs/{species}_lifted.vcf.unmap"
    output:
        bcfgz="/home/bjarkemp/primatediversity/people/bjarkemp/diversitynrecombination/data/liftover/{species}/bcfs/{species}_lifted.bcf.gz",
        unmapgz="/home/bjarkemp/primatediversity/people/bjarkemp/diversitynrecombination/data/liftover/{species}/bcfs/{species}_lifted_unmap.bcf.gz",
    shell:
        """
        bcftools sort -o {output.bcfgz} {input.vcf} -O b 
        bcftools sort -o {output.unmapgz} {input.unmapvcf} -O b 
        """

rule index:
    resources:
        mem_mb= 1000,
        runtime= 30
    input:
        bcfgz="/home/bjarkemp/primatediversity/people/bjarkemp/diversitynrecombination/data/liftover/{species}/bcfs/{species}_lifted.bcf.gz",
        unmapgz="/home/bjarkemp/primatediversity/people/bjarkemp/diversitynrecombination/data/liftover/{species}/bcfs/{species}_lifted_unmap.bcf.gz"
    output:
        bcfgz="/home/bjarkemp/primatediversity/people/bjarkemp/diversitynrecombination/data/liftover/{species}/bcfs/{species}_lifted.bcf.gz.csi",
        unmapgz="/home/bjarkemp/primatediversity/people/bjarkemp/diversitynrecombination/data/liftover/{species}/bcfs/{species}_lifted_unmap.bcf.gz.csi"
    shell:
        """
        bcftools index {input.bcfgz} -o {output.bcfgz}
        bcftools index {input.unmapgz} -o {output.unmapgz}
        """

######################################### CALLABILITY MASK #################################################
rule generate_ind_beds:
    resources:
        mem_mb= 8000,
        runtime= 210
    input:
        vcf="/home/bjarkemp/primatediversity/people/bjarkemp/diversitynrecombination/data/Baboons/{pd_id}/{pd_id}_concat.vcf.gz",
    output:
        output_file="/home/bjarkemp/primatediversity/people/bjarkemp/diversitynrecombination/data/mask/{species}/{pd_id}/{pd_id}.bed",
        modcov_file="/home/bjarkemp/primatediversity/people/bjarkemp/diversitynrecombination/data/mask/{species}/{pd_id}/{pd_id}_modcov.txt"
    params:
        MIN_HET_AD=3,  # Adjust this value as needed
        GQ=30  # Adjust this value as needed
    shell:
        """
        modcov=$(bcftools stats -d 2,500,1 {input.vcf} | grep 'DP' | \
        grep -iv -e '#' -e '<' -e '>' | sort -k 6 -V -r | head -1 | awk '{{print $3}}')
        echo $modcov > {output.modcov_file}
        min_cov=$((modcov / 2))
        max_cov=$((modcov * 2))
        # Define the output file path for the current individual
        # Apply filters and process variants, output to the defined file path
        bcftools view {input.vcf} | \
            bcftools filter -e "(GT='./.') | (GT='het' & FMT/AD[*:*] < {params.MIN_HET_AD} ) | FMT/DP <= $min_cov | FMT/DP >= $max_cov | FMT/GQ <= {params.GQ}" | \
            grep -v '#' | \
            awk 'BEGIN{{OFS="\\t"}}{{ print $1, $2-1, $2 }}' - | \
            bedtools merge | \
            sort -k1,1 -k2,2n | \
            bedtools merge > {output.output_file}
        """

# #lift bed files to the human reference genome
rule liftover_generate_bed:
    resources:
        mem_mb= 8000,
        runtime= 180
    input:
        chain_file="/home/bjarkemp/primatediversity/data/chain_files_15_03_2022/{species}_To_hg38.liftOver.gz",
        input_bed= '/home/bjarkemp/primatediversity/people/bjarkemp/diversitynrecombination/data/mask/{species}/{pd_id}/{pd_id}.bed'
    output:
        bed="/home/bjarkemp/primatediversity/people/bjarkemp/diversitynrecombination/data/mask/{species}/{pd_id}/{pd_id}_bed_lifted.bed",
        unmapbed="/home/bjarkemp/primatediversity/people/bjarkemp/diversitynrecombination/data/mask/{species}/{pd_id}/{pd_id}_bed_lifted.bed.unmap"
    shell:
        """
        # Run CrossMap.py to perform liftover and generate VCF files
        CrossMap.py bed --chromid l {input.chain_file} {input.input_bed} {output.bed} --unmap-file {output.unmapbed}
        """

rule sort_lifted:
    resources:
        mem_mb= 8000,
        runtime= 30
    input:
        input_bed= '/home/bjarkemp/primatediversity/people/bjarkemp/diversitynrecombination/data/mask/{species}/{pd_id}/{pd_id}_bed_lifted.bed'
    output:
        bed="/home/bjarkemp/primatediversity/people/bjarkemp/diversitynrecombination/data/mask/{species}/{pd_id}/{pd_id}_lifted_sorted.bed"
    shell:
        """
        sort -k1,1 -k2,2n {input.input_bed} > {output.bed}
        """

######################################### MAKE SPECIES SPECIFIC BCFS #################################################

rule species_specific_bcfs: #creates species specific bcfs, by extracting the species in the multi species bcf
    resources:
        mem_mb= 16000,
        runtime= 600
    input:
        bcfs = '/home/bjarkemp/primatediversity/people/bjarkemp/diversitynrecombination/data/liftover/{ref_assembly}/bcfs/{ref_assembly}_lifted.bcf.gz'
    output:
        species_specific = "/home/bjarkemp/primatediversity/people/bjarkemp/diversitynrecombination/data/species_specific_bcfs/{ref_assembly}/{species}/original/{species}_only.bcf.gz",
        isolation_file = "/home/bjarkemp/primatediversity/people/bjarkemp/diversitynrecombination/data/species_specific_bcfs/{ref_assembly}/{species}/{species}_isolation.txt",
        csi = "/home/bjarkemp/primatediversity/people/bjarkemp/diversitynrecombination/data/species_specific_bcfs/{ref_assembly}/{species}/original/{species}_only.bcf.gz.csi"
    params:
        ref = "{ref_assembly}",
        speciesname = lambda wildcards: wildcards.species
    conda:
        'envs/bcftools.yaml'
    shell:
        """
        python3.10 /home/bjarkemp/primatediversity/people/bjarkemp/diversitynrecombination/scripts/workflows/species_specific_bcfs/isolation_file.py {params.ref} {params.speciesname} {output.isolation_file}
        bcftools view -S {output.isolation_file} {input.bcfs} -O b -o {output.species_specific}
        bcftools index {output.species_specific}
         """

rule bcf_without_par:  #removes the PAR region from the species specific bcfs 
    resources:
        mem_mb= 16000,
        runtime= 120
    input:
        bcfs = "/home/bjarkemp/primatediversity/people/bjarkemp/diversitynrecombination/data/species_specific_bcfs/{ref_assembly}/{species}/original/{species}_only.bcf.gz"
    output:
        nonPAR_region = "/home/bjarkemp/primatediversity/people/bjarkemp/diversitynrecombination/data/species_specific_bcfs/{ref_assembly}/{species}/nonpar/{species}_nonpar.bcf.gz",
    params:
        chromosome = 'chrX',
        PAR_start = 2816500 #END Of XG gene in hg38
    conda:
        'envs/bcftools.yaml'
    shell:
        """
        bcftools view -t ^{params.chromosome}:1-{params.PAR_start} -O b {input.bcfs} > {output.nonPAR_region}
        bcftools index {output.nonPAR_region}
        """

rule bcf_with_par: # makes a bcf with only the PAR region of all individuals 
    resources:
        mem_mb= 16000,
        runtime= 120
    input:
        bcfs = "/home/bjarkemp/primatediversity/people/bjarkemp/diversitynrecombination/data/species_specific_bcfs/{ref_assembly}/{species}/original/{species}_only.bcf.gz"
    output:
        PAR_region = "/home/bjarkemp/primatediversity/people/bjarkemp/diversitynrecombination/data/species_specific_bcfs/{ref_assembly}/{species}/par/{species}_par.bcf.gz",
    params:
        chromosome = 'chrX',
        PAR_start = 2816500 #END Of XG gene in hg38
    conda:
        'envs/bcftools.yaml'
    shell:
        """
        bcftools view -t {params.chromosome}:1-{params.PAR_start} -O b {input.bcfs} > {output.PAR_region}
        bcftools index {output.PAR_region}
        """

rule extract_males: #to remove any false calls of heterozygosity from the male X chr to ensure the pi estimation to be correct, this creates a list of the males in the species
    resources:
        mem_mb= 1000,
        runtime= 20
    output:
        sex_isolation_file = "/home/bjarkemp/primatediversity/people/bjarkemp/diversitynrecombination/data/species_specific_bcfs/{ref_assembly}/{species}/nonpar/males_no_x/male_{species}_isolation.txt"
    params:
        ref = lambda wildcards: wildcards.ref_assembly,
        speciesname = lambda wildcards: wildcards.species
    shell:
        """
        python3.10 /home/bjarkemp/primatediversity/people/bjarkemp/diversitynrecombination/scripts/workflows/species_specific_bcfs/male_isoloation_file.py {params.ref} {params.speciesname} {output.sex_isolation_file}
        """

rule split_sexes_remove_male_X: # uses the txt file from above to remove the males from the species specific bcfs 
    resources:
        mem_mb= 16000,
        runtime= 300
    input:
        bcfs = "/home/bjarkemp/primatediversity/people/bjarkemp/diversitynrecombination/data/species_specific_bcfs/{ref_assembly}/{species}/nonpar/{species}_nonpar.bcf.gz",
        sex_isolation_file = "/home/bjarkemp/primatediversity/people/bjarkemp/diversitynrecombination/data/species_specific_bcfs/{ref_assembly}/{species}/nonpar/males_no_x/male_{species}_isolation.txt"
    output:
        females = "/home/bjarkemp/primatediversity/people/bjarkemp/diversitynrecombination/data/species_specific_bcfs/{ref_assembly}/{species}/nonpar/females/{species}.bcf.gz",
        males = "/home/bjarkemp/primatediversity/people/bjarkemp/diversitynrecombination/data/species_specific_bcfs/{ref_assembly}/{species}/nonpar/males_no_x/{species}.bcf.gz"
    conda:
        'envs/bcftools.yaml'
    shell:
        """
        bcftools view -S ^{input.sex_isolation_file} {input.bcfs} -O b > {output.females}
        bcftools index {output.females}
        bcftools view -S {input.sex_isolation_file} {input.bcfs} -Ou | bcftools view -t ^chrX -O b > {output.males}
        bcftools index {output.males}
        """

rule merge_sexes: #merge the females with the males without the X chr into one file, which is to be used in estimating pi
    resources:
        runtime= 800, #in minutes
        mem_mb= 32000 #in megabytes
    input:
        females = "/home/bjarkemp/primatediversity/people/bjarkemp/diversitynrecombination/data/species_specific_bcfs/{ref_assembly}/{species}/nonpar/females/{species}.bcf.gz",
        males = "/home/bjarkemp/primatediversity/people/bjarkemp/diversitynrecombination/data/species_specific_bcfs/{ref_assembly}/{species}/nonpar/males_no_x/{species}.bcf.gz"
    output:
        merged="/home/bjarkemp/primatediversity/people/bjarkemp/diversitynrecombination/data/species_specific_bcfs/{ref_assembly}/{species}/nonpar/merged_non_male_X/{species}.bcf.gz"
    conda: 
        'envs/bcftools.yaml'
    shell:
        """
        bcftools merge {input.females} {input.males} -O b > {output.merged}
        bcftools index {output.merged}
        """

# ################################################## ESTIMATE PI ########################################################

rule windowed_pi_for_each_species:
    resources:
        mem_mb=16000, #memory in megabytes
        runtime=120 #runtime in minutes
    input:
        nonpar = "/home/bjarkemp/primatediversity/people/bjarkemp/diversitynrecombination/data/species_specific_bcfs/{ref_assembly}/{species}/nonpar/merged_non_male_X/{species}.bcf.gz",
        par = "/home/bjarkemp/primatediversity/people/bjarkemp/diversitynrecombination/data/species_specific_bcfs/{ref_assembly}/{species}/par/{species}_par.bcf.gz"
    output:
        windowed_pi = "/home/bjarkemp/primatediversity/people/bjarkemp/diversitynrecombination/results/windowed_pi/{ref_assembly}/{species}/nonpar/{species}_{window_size}.windowed.pi",
        windowed_pi_par = "/home/bjarkemp/primatediversity/people/bjarkemp/diversitynrecombination/results/windowed_pi/{ref_assembly}/{species}/par/{species}_{window_size}_par.windowed.pi"
    params:
        window = "{window_size}",
        prefix = "/home/bjarkemp/primatediversity/people/bjarkemp/diversitynrecombination/results/windowed_pi/{ref_assembly}/{species}/nonpar/{species}_{window_size}",
        prefix_par = "/home/bjarkemp/primatediversity/people/bjarkemp/diversitynrecombination/results/windowed_pi/{ref_assembly}/{species}/par/{species}_{window_size}_par"
    log:
        nonpar='/home/bjarkemp/primatediversity/people/bjarkemp/diversitynrecombination/scripts/workflows/pi_estimation/windowed_pi/log/{ref_assembly}/{species}_{window_size}.log',
        par='/home/bjarkemp/primatediversity/people/bjarkemp/diversitynrecombination/scripts/workflows/pi_estimation/windowed_pi/log/{ref_assembly}/{species}_{window_size}_par.log'
    conda:
        'envs/vcftools.yaml'
    shell:
        """
        vcftools --bcf {input.nonpar} --window-pi {params.window} --out {params.prefix} 2> {log.nonpar}
        vcftools --bcf {input.par} --window-pi {params.window} --out {params.prefix_par} 2> {log.par}
        """

rule make_window_file:
    resources:
        mem_mb=16000, #memory in megabytes
        runtime=120 #runtime in minutes
    input:
        window_pi = "/home/bjarkemp/primatediversity/people/bjarkemp/diversitynrecombination/results/windowed_pi/{ref_assembly}/{species}/nonpar/{species}_{window_size}.windowed.pi",
        window_par = "/home/bjarkemp/primatediversity/people/bjarkemp/diversitynrecombination/results/windowed_pi/{ref_assembly}/{species}/par/{species}_{window_size}_par.windowed.pi"
    output:
        window_bed = "/home/bjarkemp/primatediversity/people/bjarkemp/diversitynrecombination/data/window_bed/{ref_assembly}/{species}/nonpar/{species}_{window_size}.bed",
        window_bed_par = "/home/bjarkemp/primatediversity/people/bjarkemp/diversitynrecombination/data/window_bed/{ref_assembly}/{species}/par/{species}_{window_size}_par.bed"
    shell:
        """
        #get the start end and chr and make bed file maybe
        awk 'NR > 1 {{print $1 "\t" $2 "\t" $3}}' {input.window_pi} > {output.window_bed}
        awk 'NR > 1 {{print $1 "\t" $2 "\t" $3}}' {input.window_par} > {output.window_bed_par}
        """

# ################################################## Calculate windowbased coverage ########################################################
# rule intersect_windows:
#     input:
#         window_file = '/home/bjarkemp/primatediversity/people/bjarkemp/diversitynrecombination/data/window_bed/{ref_assembly}/{species}/nonpar/{species}_{window_size}.bed',        
#         callable_vcf = '/home/bjarkemp/primatediversity/people/bjarkemp/diversitynrecombination/data/mask/{ref_assembly}/{pd_id}/{pd_id}_lifted_sorted.bed'
#     output:
#         outfile = '/home/bjarkemp/primatediversity/people/bjarkemp/diversitynrecombination/data/mask/{ref_assembly}/{species}/{pd_id}/nonpar/txt/{pd_id}_coverage_{window_size}.txt'
#     conda:
#         'envs/bedtools.yaml'
#     resources:
#         mem_mb=64000,
#         runtime=30
#     shell:
#         '''
#         bedtools intersect -a {input.window_file} -b {input.callable_vcf} -wo > {output.outfile}
#         '''

# # ## calculate coverage per individual ##
# rule maskfile:
#     input:
#         coverage_file = '/home/bjarkemp/primatediversity/people/bjarkemp/diversitynrecombination/data/mask/{ref_assembly}/{species}/{pd_id}/nonpar/txt/{pd_id}_coverage_{window_size}.txt'
#     output:
#         masked_file = '/home/bjarkemp/primatediversity/people/bjarkemp/diversitynrecombination/data/mask/{ref_assembly}/{species}/{pd_id}/nonpar/csv/{pd_id}_masked_{window_size}.csv'
#     params:
#         window_size = "{window_size}",
#         pd_id = "{pd_id}",
#         sex = lambda wildcards: get_sex(wildcards.pd_id) #NA for coverrage if sex = male and chr = X as we dont want to make the mistake of including the male x coverage when we summarise for species
#     conda:
#         'envs/maskfile.yaml'
#     resources:
#         mem_mb=64000,
#         runtime=30
#     script: '/home/bjarkemp/primatediversity/people/bjarkemp/diversitynrecombination/scripts/workflows/calculate_win_based_coverage/maskfile.R'

# # #################### CALCULATE WIND BASED RECOMBINATION RATE #############################
# # # a rule that produces species specific intersect between the recombination rate and the window bed file
# rule parse_recomb_to_window:
#     input:
#         recombination_file = '/home/bjarkemp/primatediversity/people/bjarkemp/diversitynrecombination/data/Recombination_map_decode_2019',
#         window_file = '/home/bjarkemp/primatediversity/people/bjarkemp/diversitynrecombination/data/window_bed/{ref_assembly}/{species}/nonpar/{species}_{window_size}.bed'
#     output:
#         file = '/home/bjarkemp/primatediversity/people/bjarkemp/diversitynrecombination/data/recombinationrates/{ref_assembly}/{species}/nonpar/{species}_{window_size}_recomb.bed'
#     conda:
#         '/home/bjarkemp/primatediversity/people/bjarkemp/diversitynrecombination/scripts/workflows/recombinationrate/envs/pandas.yaml'
#     resources:
#         mem_mb = 4000,
#         runtime = lambda wildcards: specific_runtime(wildcards.window_size)
#     shell:
#         '''
#         python /home/bjarkemp/primatediversity/people/bjarkemp/diversitynrecombination/scripts/workflows/recombinationrate/recombinationrate_parser.py \
#         {input.window_file} {input.recombination_file} {output.file}
#         '''

# ############################################# SUMMARISE SPECIES ########################################################


# rule combine_species:
#     input:
#         check_pi_files_for_combine_species,
#         check_callable_fracs_files_for_combine_species
#     output:
#         output='/home/bjarkemp/primatediversity/people/bjarkemp/diversitynrecombination/results/combined/{ref_assembly}/{ref_assembly}_{window_size}_combined.csv'
#     params:
#         ref_assembly='{ref_assembly}',
#         window_size='{window_size}'
#     conda:
#         'envs/pandas.yaml'
#     resources:
#         mem_mb=10000,
#         runtime=30
#     shell:
#         '''
#         python /home/bjarkemp/primatediversity/people/bjarkemp/diversitynrecombination/scripts/workflows/summarise_species/summarise_pi_n_frac.py {params.ref_assembly} {params.window_size} {output}
#         '''
    
