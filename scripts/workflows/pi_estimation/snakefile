#Snakefile for calculating windowed pi for each species


def generatedictionary(input):
    dictionary_of_species_n_pdid = {}
    with open(input_file, 'r') as file:
        header = next(file)  # Read and skip the header line
        for line in file:
            fields = line.strip().split(',')
            pdgp_id, genus, species, froh, sex, ref_assembly = fields
            if not ref_assembly:  # Check if ref_assembly is empty
                ref_assembly = 'unknown'
            # Add the pdgp_id to the appropriate category in the dictionary
            if ref_assembly not in dictionary_of_species_n_pdid:
                dictionary_of_species_n_pdid[ref_assembly] = {species: [pdgp_id]}
            elif species not in dictionary_of_species_n_pdid[ref_assembly]:
                dictionary_of_species_n_pdid[ref_assembly][species] = [pdgp_id]
            else:
                dictionary_of_species_n_pdid[ref_assembly][species].append(pdgp_id)
    return dictionary_of_species_n_pdid 

def get_output_paths(dictionary_of_species_n_pdid, window_list, command):
    out_paths = []
    for ref_assembly in dictionary_of_species_n_pdid:
        if ref_assembly != 'unknown' and ref_assembly in ref_list:
            for species in dictionary_of_species_n_pdid[ref_assembly]:
                if command=='windowpi':
                    for window_size in window_list:
                        out_paths.append(f"/home/bjarkemp/primatediversity/people/bjarkemp/diversitynrecombination/results/windowed_pi/{ref_assembly}/{species}/nonpar/{species}_{window_size}.windowed.pi")
                elif command=='windowbed':
                    for window_size in window_list:
                        out_paths.append(f"/home/bjarkemp/primatediversity/people/bjarkemp/diversitynrecombination/data/window_bed/{ref_assembly}/{species}/nonpar/{species}_{window_size}.bed")
    return out_paths

## LOAD DICTIONARY AND WINDOWLIST AND REFS 
ref_list = ['Daubentonia_madagascariensis','Saguinus_midas','Chlorocebus_aethiops','Rhinopithecus_roxellana',
                'Mandrillus_sphinx','Macaca_mulatta','Loris_tardigradus','Callithrix_jacchus',
                'Pithecia_pithecia','Lemur_catta-Thomas','Gorilla_gorilla_gorilla','Aotus_nancymaae','Sapajus_apella',
                'Pongo_abelii','Cercocebus_atys','Galago_moholi','Nomascus_leucogenys','Colobus_guereza',
                'Cebus_albifrons','Cercopithecus_mitis','Pongo_pygmaeus','Pan_troglodytes','Erythrocebus_patas',
                'Microcebus_murinus','Atele_fusciceps','Otolemur_garnettii','Nycticebus_pygmaeus']
# ref_list = ['Daubentonia_madagascariensis','Gorilla_gorilla_gorilla']
#Missing g.vcf.gz species: Theropithecus_gelada
#Missing chainfiles: Carlito_syrichta Propithecus_coquereli'
input_file = '/home/bjarkemp/primatediversity/people/bjarkemp/diversitynrecombination/data/PDGP_metadata.txt'
list_of_windows = [1000, 5000, 10000, 50000, 100000, 500000, 1000000, 2000000, 10000000]
#list_of_windows = [5000]
dictionary_of_inds=generatedictionary(input_file)


rule all:
    input:
        expand(get_output_paths(dictionary_of_inds, list_of_windows, 'windowpi'), ref_assembly=ref_list),
        expand(get_output_paths(dictionary_of_inds, list_of_windows, 'windowbed'), ref_assembly=ref_list)

rule windowed_pi_for_each_species:
    input:
        nonpar = "/home/bjarkemp/primatediversity/people/bjarkemp/diversitynrecombination/data/species_specific_bcfs/{ref_assembly}/{species}/nonpar/merged_non_male_X/{species}.bcf.gz",
        par = "/home/bjarkemp/primatediversity/people/bjarkemp/diversitynrecombination/data/species_specific_bcfs/{ref_assembly}/{species}/par/{species}_par.bcf.gz"
    output:
        windowed_pi = "/home/bjarkemp/primatediversity/people/bjarkemp/diversitynrecombination/results/windowed_pi/{ref_assembly}/{species}/nonpar/{species}_{window_size}.windowed.pi",
        windowed_pi_par = "/home/bjarkemp/primatediversity/people/bjarkemp/diversitynrecombination/results/windowed_pi/{ref_assembly}/{species}/par/{species}_{window_size}_par.windowed.pi"
    params:
        window = "{window_size}",
        prefix = "/home/bjarkemp/primatediversity/people/bjarkemp/diversitynrecombination/results/windowed_pi/{ref_assembly}/{species}/nonpar/{species}_{window_size}",
        prefix_par = "/home/bjarkemp/primatediversity/people/bjarkemp/diversitynrecombination/results/windowed_pi/{ref_assembly}/{species}/par/{species}_{window_size}_par"
    log:
        nonpar='/home/bjarkemp/primatediversity/people/bjarkemp/diversitynrecombination/scripts/workflows/pi_estimation/windowed_pi/log/{ref_assembly}/{species}_{window_size}.log',
        par='/home/bjarkemp/primatediversity/people/bjarkemp/diversitynrecombination/scripts/workflows/pi_estimation/windowed_pi/log/{ref_assembly}/{species}_{window_size}_par.log'
    conda:
        'envs/vcftools.yaml'
    resources:
        mem_mb=16000, #memory in megabytes
        runtime=300 #runtime in minutes
    shell:
        """
        vcftools --bcf {input.nonpar} --window-pi {params.window} --out {params.prefix} 2> {log.nonpar}
        vcftools --bcf {input.par} --window-pi {params.window} --out {params.prefix_par} 2> {log.par}
        """

rule make_window_file:
    input:
        window_pi = "/home/bjarkemp/primatediversity/people/bjarkemp/diversitynrecombination/results/windowed_pi/{ref_assembly}/{species}/nonpar/{species}_{window_size}.windowed.pi",
        window_par = "/home/bjarkemp/primatediversity/people/bjarkemp/diversitynrecombination/results/windowed_pi/{ref_assembly}/{species}/par/{species}_{window_size}_par.windowed.pi"
    output:
        window_bed = "/home/bjarkemp/primatediversity/people/bjarkemp/diversitynrecombination/data/window_bed/{ref_assembly}/{species}/nonpar/{species}_{window_size}.bed",
        window_bed_par = "/home/bjarkemp/primatediversity/people/bjarkemp/diversitynrecombination/data/window_bed/{ref_assembly}/{species}/par/{species}_{window_size}_par.bed"
    resources:
        mem_mb=16000, #memory in megabytes
        runtime=200 #runtime in minutes
    shell:
        """
        #get the start end and chr and make bed file maybe
        awk 'NR > 1 {{print $1 "\t" $2 "\t" $3}}' {input.window_pi} > {output.window_bed}
        awk 'NR > 1 {{print $1 "\t" $2 "\t" $3}}' {input.window_par} > {output.window_bed_par}
        """
