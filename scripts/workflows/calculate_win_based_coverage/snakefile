#this script calcualtes the coverage in windows of a given sizes
input_file = '/home/bjarkemp/primatediversity/people/bjarkemp/diversitynrecombination/data/PDGP_metadata.txt'
def generatedictionary(input):
    dictionary_of_species_n_pdid = {}
    with open(input_file, 'r') as file:
        header = next(file)  # Read and skip the header line
        for line in file:
            fields = line.strip().split(',')
            pdgp_id, genus, species, froh, sex, ref_assembly = fields
            if not ref_assembly:  # Check if ref_assembly is empty
                ref_assembly = 'unknown'
            # Add the pdgp_id to the appropriate category in the dictionary
            if ref_assembly not in dictionary_of_species_n_pdid:
                dictionary_of_species_n_pdid[ref_assembly] = {species: [pdgp_id]}
            elif species not in dictionary_of_species_n_pdid[ref_assembly]:
                dictionary_of_species_n_pdid[ref_assembly][species] = [pdgp_id]
            else:
                dictionary_of_species_n_pdid[ref_assembly][species].append(pdgp_id)
    return dictionary_of_species_n_pdid 

dictionary_of_sex = {}
with open(input_file, 'r') as file:
    header = next(file)  # Read and skip the header line
    for line in file:
        fields = line.strip().split(',')
        pdgp_id, genus, species, froh, sex, ref_assembly = fields
        # Add the pdgp_id to the appropriate category in the dictionary
        if pdgp_id not in dictionary_of_sex:
            dictionary_of_sex[str(pdgp_id)] = str(sex)

def get_sex(pd_id):
    return dictionary_of_sex[pd_id]

# Define a Python function to generate the expand statement
def generate_input_paths(species_list, window_size, command=None):
    input_paths = []
    for ref_assembly in species_list:
        for species in dictionary_of_inds[ref_assembly]:
            for pd_id in dictionary_of_inds[ref_assembly][species]:
                for window_size in window_list:
                    if command=='intersect':
                        input_paths.append(f'/home/bjarkemp/primatediversity/people/bjarkemp/diversitynrecombination/data/mask/{ref_assembly}/{species}/{pd_id}/nonpar/txt/{pd_id}_coverage_{window_size}.txt')
                    elif command=='mask':
                        input_paths.append(f'/home/bjarkemp/primatediversity/people/bjarkemp/diversitynrecombination/data/mask/{ref_assembly}/{species}/{pd_id}/nonpar/csv/{pd_id}_masked_{window_size}.csv')
    return input_paths
  

species_list = ['Pongo_abelii']
# species_list = ['Daubentonia_madagascariensis','Saguinus_midas','Chlorocebus_aethiops',
#                 'Rhinopithecus_roxellana','Mandrillus_sphinx','Macaca_mulatta','Loris_tardigradus','Callithrix_jacchus',
#                 'Pithecia_pithecia','Lemur_catta-Thomas','Gorilla_gorilla_gorilla','Aotus_nancymaae','Sapajus_apella',
#                 'Pongo_abelii','Cercocebus_atys','Galago_moholi','Nomascus_leucogenys','Colobus_guereza',
#                 'Cebus_albifrons','Cercopithecus_mitis','Pongo_pygmaeus','Pan_troglodytes','Erythrocebus_patas',
#                 'Microcebus_murinus','Atele_fusciceps','Otolemur_garnettii','Nycticebus_pygmaeus']
#Missing g.vcf.gz species: Theropithecus_gelada
#Missing chainfiles: Carlito_syrichta Propithecus_coquereli'

dictionary_of_inds = generatedictionary(input_file)
#window_list = [1000000]
window_list = [1000, 5000, 10000, 50000, 100000, 500000, 1000000, 2000000, 10000000]



rule all:
    input:
        expand(generate_input_paths(species_list, command='intersect', window_size=window_list)),
        expand(generate_input_paths(species_list, command='mask', window_size=window_list)),


## intersect callable and liftable parts ##
rule intersect_windows:
    input:
        window_file = '/home/bjarkemp/primatediversity/people/bjarkemp/diversitynrecombination/data/window_bed/{ref_assembly}/{species}/nonpar/{species}_{window_size}.bed',        
        callable_vcf = '/home/bjarkemp/primatediversity/people/bjarkemp/diversitynrecombination/data/mask/{ref_assembly}/{pd_id}/{pd_id}_lifted_sorted.bed'
    output:
        outfile = '/home/bjarkemp/primatediversity/people/bjarkemp/diversitynrecombination/data/mask/{ref_assembly}/{species}/{pd_id}/nonpar/txt/{pd_id}_coverage_{window_size}.txt'
    conda:
        'envs/bedtools.yaml'
    shell:
        '''
        bedtools intersect -a {input.window_file} -b {input.callable_vcf} -wo > {output.outfile}
        '''


## calculate coverage per individual ##
rule maskfile:
    input:
        coverage_file = '/home/bjarkemp/primatediversity/people/bjarkemp/diversitynrecombination/data/mask/{ref_assembly}/{species}/{pd_id}/nonpar/txt/{pd_id}_coverage_{window_size}.txt'
    output:
        masked_file = '/home/bjarkemp/primatediversity/people/bjarkemp/diversitynrecombination/data/mask/{ref_assembly}/{species}/{pd_id}/nonpar/csv/{pd_id}_masked_{window_size}.csv'
    params:
        window_size = "{window_size}",
        pd_id = "{pd_id}",
        sex = lambda wildcards: get_sex(wildcards.pd_id) #NA for coverrage if sex = male and chr = X as we dont want to make the mistake of including the male x coverage when we summarise for species
    conda:
        'envs/maskfile.yaml'
    script: '/home/bjarkemp/primatediversity/people/bjarkemp/diversitynrecombination/scripts/workflows/calculate_win_based_coverage/maskfile.R'

# ## MAKE COVERAGE PLOTS ##

#rule calculate_species_average:
