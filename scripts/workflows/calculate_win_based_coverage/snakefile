#this script calcualtes the coverage in windows of a given sizes
input_file = '/home/bjarkemp/primatediversity/people/bjarkemp/diversitynrecombination/data/PDGP_metadata.txt'
dictionary_of_inds = {}
with open(input_file, 'r') as file:
    header = next(file)  # Read and skip the header line
    for line in file:
        fields = line.strip().split(',')
        pdgp_id, genus, species, froh, sex, ref_assembly = fields
        if not ref_assembly:  # Check if ref_assembly is empty
            ref_assembly = 'unknown'
        # Add the pdgp_id to the appropriate category in the dictionary
        if ref_assembly not in dictionary_of_inds:
            dictionary_of_inds[ref_assembly] = [pdgp_id]
        else:
            dictionary_of_inds[ref_assembly].append(pdgp_id)

dictionary_of_sex = {}
with open(input_file, 'r') as file:
    header = next(file)  # Read and skip the header line
    for line in file:
        fields = line.strip().split(',')
        pdgp_id, genus, species, froh, sex, ref_assembly = fields
        # Add the pdgp_id to the appropriate category in the dictionary
        if pdgp_id not in dictionary_of_sex:
            dictionary_of_sex[str(pdgp_id)] = str(sex)

def get_sex(pd_id):
    return dictionary_of_sex[pd_id]


# Define a Python function to generate the expand statement
def generate_input_paths(species_list, window_size, path=1):
    input_paths = []
    for species in species_list:
        for pd_id in dictionary_of_inds.get(species, []):
            for window_size in window_list:
                if path==1:
                    input_paths.append(f'/home/bjarkemp/primatediversity/people/bjarkemp/diversitynrecombination/data/mask/{species}/{pd_id}/plots/{window_size}_coverage.pdf')
                elif path==2:
                    input_paths.append(f'/home/bjarkemp/primatediversity/people/bjarkemp/diversitynrecombination/data/mask/{species}/{pd_id}/txt/{pd_id}_coverage_{window_size}.txt')
                elif path==3:
                    input_paths.append(f'/home/bjarkemp/primatediversity/people/bjarkemp/diversitynrecombination/data/mask/{species}/{pd_id}/csv/{pd_id}_masked_{window_size}.csv')
                elif path==4:
                    input_paths.append(f'/home/bjarkemp/primatediversity/people/bjarkemp/diversitynrecombination/data/mask/{species}/{pd_id}/{pd_id}_lifted_sorted_par.bed')
    return input_paths
  

# ## MAKE WINDOW BEDS ##

window_list = [1000, 5000, 10000, 50000, 100000, 500000, 1000000, 2000000, 10000000]

species_list = ['Daubentonia_madagascariensis']
# species_list = ['Daubentonia_madagascariensis','Saguinus_midas','Chlorocebus_aethiops',
#                 'Rhinopithecus_roxellana','Mandrillus_sphinx','Macaca_mulatta','Loris_tardigradus','Callithrix_jacchus',
#                 'Pithecia_pithecia','Lemur_catta-Thomas','Gorilla_gorilla_gorilla','Aotus_nancymaae','Sapajus_apella',
#                 'Pongo_abelii','Cercocebus_atys','Galago_moholi','Nomascus_leucogenys','Colobus_guereza',
#                 'Cebus_albifrons','Cercopithecus_mitis','Pongo_pygmaeus','Pan_troglodytes','Erythrocebus_patas',
#                 'Microcebus_murinus','Atele_fusciceps','Otolemur_garnettii','Nycticebus_pygmaeus']
#Missing g.vcf.gz species: Theropithecus_gelada
#Missing chainfiles: Carlito_syrichta Propithecus_coquereli'


# Modify the rule all to use species_list for both original and lifted BED files
# Modify the rule all to use species_list for both original and lifted BED files
rule all:
    input:
        expand('/home/bjarkemp/primatediversity/people/bjarkemp/diversitynrecombination/data/coverage/bed_original/{window_size}_window.bed', window_size = window_list),
        expand(generate_input_paths(species_list, path=2, window_size=window_list)),
        #expand(generate_input_paths(species_list, path=1, window_size=window_list)),
        #expand(generate_input_paths(species_list, path=3, window_size=window_list)),
        expand(generate_input_paths(species_list, path=4, window_size=window_list)),
        expand('/home/bjarkemp/primatediversity/people/bjarkemp/diversitynrecombination/data/coverage/par/{window_size}_window_par.bed', window_size = window_list)

rule generate_window_sized_beds:
    input:
        reference_genome = '/home/bjarkemp/primatediversity/data/chain_files_15_03_2022/hg38/hg38.fasta.fai'
    output:
        outfile = '/home/bjarkemp/primatediversity/people/bjarkemp/diversitynrecombination/data/coverage/bed_original/{window_size}_window.bed'
    conda:
        'envs/bedtools.yaml'
    shell:
        '''
        bedtools makewindows -g {input.reference_genome} -w {wildcards.window_size} > {output}
        #sort -k1,1 -k2,2n {output} > {output}
        '''



rule extract_par_region_in_window:
    input:
        file='/home/bjarkemp/primatediversity/people/bjarkemp/diversitynrecombination/data/coverage/bed_original/{window_size}_window.bed'
    output:
        out='/home/bjarkemp/primatediversity/people/bjarkemp/diversitynrecombination/data/coverage/par/{window_size}_window_par.bed'
    params:
        par_end = 2816500, #the end of the XG gene, which is thourght to lie on the border of the PAR
        chr_end = 156040895, #the end of the X chromosome
        window_size = "{window_size}"
    shell:
        '''
        python3.10 /home/bjarkemp/primatediversity/people/bjarkemp/diversitynrecombination/scripts/workflows/calculate_win_based_coverage/extract_par_region.py {input.file} {output.out} {params.window_size} {params.par_end} {params.chr_end}
        '''

rule rename_par_in_lifted_bed:
    input:
        callable_vcf = '/home/bjarkemp/primatediversity/people/bjarkemp/diversitynrecombination/data/mask/{species}/{pd_id}/{pd_id}_lifted_sorted.bed'
    output:
        outfile = '/home/bjarkemp/primatediversity/people/bjarkemp/diversitynrecombination/data/mask/{species}/{pd_id}/{pd_id}_lifted_sorted_par.bed'
    params:
        par_end = 2816500, #the end of the XG gene, which is thourght to lie on the border of the PAR

    shell:
        '''
        python3.10 /home/bjarkemp/primatediversity/people/bjarkemp/diversitynrecombination/scripts/workflows/calculate_win_based_coverage/rename_par.py {input.callable_vcf} {output.outfile} {params.par_end}
        '''
    
    
## CALCULATE COVERAGE ##
rule calculate_coverage:
    input:
        window_file = '/home/bjarkemp/primatediversity/people/bjarkemp/diversitynrecombination/data/coverage/par/{window_size}_window_par.bed',        
        callable_vcf = '/home/bjarkemp/primatediversity/people/bjarkemp/diversitynrecombination/data/mask/{species}/{pd_id}/{pd_id}_lifted_sorted_par.bed'
    output:
        outfile = '/home/bjarkemp/primatediversity/people/bjarkemp/diversitynrecombination/data/mask/{species}/{pd_id}/txt/{pd_id}_coverage_{window_size}.txt'
    params:
        window_size = "{window_size}",
        PAR_region = 2816500 #the end of the XG gene, which is thought to lie on the border of the PAR
    conda:
        'envs/bedtools.yaml'
    shell:
        '''
        bedtools intersect -a {input.window_file} -b {input.callable_vcf} -wo > {output.outfile}
        '''
# somehow this does



# rule maskfile:
#     input:
#         coverage_file = '/home/bjarkemp/primatediversity/people/bjarkemp/diversitynrecombination/data/mask/{species}/{pd_id}/txt/{pd_id}_coverage_{window_size}.txt'
#     output:
#         masked_file = '/home/bjarkemp/primatediversity/people/bjarkemp/diversitynrecombination/data/mask/{species}/{pd_id}/csv/{pd_id}_masked_{window_size}.csv'
#     params:
#         window_size = "{window_size}",
#         pd_id = "{pd_id}",
#         sex = lambda wildcards: get_sex(wildcards.pd_id)
#     conda:
#         'envs/maskfile.yaml'
#     script: '/home/bjarkemp/primatediversity/people/bjarkemp/diversitynrecombination/scripts/workflows/calculate_win_based_coverage/maskfile.R'

# ## MAKE COVERAGE PLOTS ##

# rule make_plots:
#     input:
#          masked_file = '/home/bjarkemp/primatediversity/people/bjarkemp/diversitynrecombination/data/mask/{species}/{pd_id}/csv/{pd_id}_masked_{window_size}.csv'
#     output:
#         plots = '/home/bjarkemp/primatediversity/people/bjarkemp/diversitynrecombination/data/mask/{species}/{pd_id}/plots/{window_size}_coverage.pdf'
#     params:
#         species = "{species}",
#         window_size = lambda wildcards: int(wildcards.window_size),
#         pd_id = "{pd_id}"
#     conda:
#         'envs/coverage_plots.yaml'
#     script: '/home/bjarkemp/primatediversity/people/bjarkemp/diversitynrecombination/scripts/workflows/calculate_win_based_coverage/plot_coverage.R'

